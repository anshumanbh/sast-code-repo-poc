on:
  pull_request: {}
  push:
    branches:
    - main
    paths:
    - .github/workflows/semgrep.yml
  # schedule:
  # - cron: '0 0 * * 0'
name: Semgrep SAST Scan
jobs:
  semgrep:
    name: Scan
    runs-on: ubuntu-20.04
    container:
      image: returntocorp/semgrep
    env:
      DEFECT_DOJO_TOKEN: ${{ secrets.DD_TOKEN }}
      DEFECT_DOJO_DOMAIN: ${{ secrets.DD_DOMAIN }}
      DEFECT_DOJO_ENGAGEMENT_VALUE: '3'
      DEFECT_DOJO_SCAN_TYPE: SARIF
    steps:
    - name: Checkout rules
      uses: actions/checkout@v3
      with:
        repository: anshumanbh/semgrep-rules-poc
        token: ${{ secrets.ACCESS_TOKEN }}
        path: ./rules
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ./code
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Run all the rules & send results to Defect Dojo, if not a PR
      id: run_rules_nonpr
      run: |
        semgrep scan --sarif --config ./rules/ ./code > nonpr.sarif;
        cat nonpr.sarif
        if [[ -s nonpr.sarif ]]; then
           python3 ./rules/scripts/send-results-to-defectdojo.py ./nonpr.sarif;
        fi
      if: github.event_name != 'pull_request'
    - name: Run monitor rules & send results to Defect Dojo, if a PR
      id: run_monitor_rules_pr
      env:
        SEMGREP_RULES: ./../rules/monitor/
      run: |
        cd code;
        echo $(semgrep ci --sarif || true) > monitor_out.sarif; cat monitor_out.sarif
        if [[ -s monitor_out.sarif ]]; then
          python3 ./../rules/scripts/send-results-to-defectdojo.py ./monitor_out.sarif;
        fi
      if: github.event_name == 'pull_request'
    - name: Run comment rules, retrieve JSON results & send results to Defect Dojo, if a PR.
      id: run_comment_rules_pr
      env:
        SEMGREP_RULES: ./../rules/comment/
      run: |
        cd code;
        echo $(semgrep ci --json || true) > comment_out.json; cat comment_out.json
        echo $(semgrep ci --sarif || true) > comment_out.sarif; cat comment_out.sarif
        if [[ -s ./comment_out.json ]]; then
          python3 ./../rules/scripts/retrieve-results-from-json.py ./comment_out.json ./comment_results.txt;
          cat ./comment_results.txt
          if [[ -s ./comment_results.txt ]]; then
            cat ./comment_results.txt
            pwd
            echo "::set-output name=comment_results_file_exists::True"
          fi
        fi
        if [[ -s comment_out.sarif ]]; then
          python3 ./../rules/scripts/send-results-to-defectdojo.py ./comment_out.sarif;
        fi
      if: github.event_name == 'pull_request'
    - name: Test Step
      run: |
        ls -al
        ls -al ./code
        cat ./code/comment_results.txt
    - name: Comment on PR for comment rules if findings exist, if a PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./code/comment_results.txt
      if: steps.run_comment_rules_pr.outputs.comment_results_file_exists == 'True'
    - name: Run blocking rules, retrieve JSON results & send results to Defect Dojo, if a PR
      id: run_blocking_rules_pr
      env:
        SEMGREP_RULES: ./../rules/block/
      run: |
        cd code;
        echo $(semgrep ci --json) > blocking_out.json; cat blocking_out.json
        echo $(semgrep ci --sarif) > blocking_out.sarif; cat blocking_out.sarif
        if [[ -s blocking_out.json ]]; then
          python3 ./../rules/scripts/retrieve-results-from-json.py ./blocking_out.json ./blocking_results.txt; cat blocking_results.txt
          if [[ -s blocking_results.txt ]]; then
            echo "::set-output name=blocking_results_file_exists::True"
          fi
        fi
        if [[ -s blocking_out.sarif ]]; then
          python3 ./../rules/scripts/send-results-to-defectdojo.py ./blocking_out.sarif;
        fi
      if: github.event_name == 'pull_request'
    - name: Comment on PR for blocking rules if findings exist, if a PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./code/blocking_results.txt
      if: steps.run_blocking_rules_pr.outputs.blocking_results_file_exists == 'True'

